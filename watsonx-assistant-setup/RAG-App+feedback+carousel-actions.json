{
  "name": "RAG App with Logging-action",
  "type": "action",
  "valid": true,
  "status": "Available",
  "created": "2024-10-31T17:57:34.267Z",
  "updated": "2024-11-05T23:42:08.480Z",
  "language": "en",
  "skill_id": "55331103-544e-4746-b438-ca69ae204366",
  "workspace": {
    "actions": [
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_797",
            "title": "Save off original user query",
            "output": {
              "generic": []
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "input.text"
                  },
                  "skill_variable": "query_text"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_797",
            "next_step": "step_397"
          },
          {
            "step": "step_397",
            "title": "Did user already specify type of Windows 10 device?",
            "output": {
              "generic": []
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "scalar": false
                  },
                  "skill_variable": "proceed_with_setting_context"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_397",
            "condition": {
              "or": [
                {
                  "and": [
                    {
                      "contains": [
                        {
                          "skill_variable": "query_text"
                        },
                        {
                          "scalar": "Windows 10 Pro"
                        }
                      ]
                    }
                  ]
                },
                {
                  "and": [
                    {
                      "contains": [
                        {
                          "skill_variable": "query_text"
                        },
                        {
                          "scalar": "Windows 10 Home"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "next_step": "step_903"
          },
          {
            "step": "step_903",
            "title": "If proceed, prompt for more specific device",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Which device are you referring to?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential",
                  "repeat_on_reprompt": false
                },
                {
                  "options": [
                    {
                      "label": "Windows 10 Pro",
                      "value": {
                        "input": {
                          "text": "Windows 10 Pro"
                        }
                      }
                    },
                    {
                      "label": "Windows 10 Home",
                      "value": {
                        "input": {
                          "text": "Windows 10 Home"
                        }
                      }
                    },
                    {
                      "label": "None of these",
                      "value": {
                        "input": {
                          "text": "None of these"
                        }
                      }
                    }
                  ],
                  "response_type": "option",
                  "repeat_on_reprompt": true
                }
              ]
            },
            "context": {
              "variables": []
            },
            "handlers": [
              {
                "type": "not_found",
                "title": "validation_not_found_handler",
                "output": {
                  "generic": [
                    {
                      "values": [
                        {
                          "text_expression": {
                            "concat": [
                              {
                                "scalar": "I didn't catch that. Select a valid option:"
                              }
                            ]
                          }
                        }
                      ],
                      "response_type": "text",
                      "selection_policy": "incremental"
                    }
                  ]
                },
                "handler": "validation_not_found_handler",
                "resolver": {
                  "type": "prompt_again"
                },
                "next_handler": "validation_not_found_max_tries_handler"
              },
              {
                "type": "not_found_max_tries",
                "title": "validation_not_found_max_tries_handler",
                "handler": "validation_not_found_max_tries_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "question": {
              "entity": "entity_19711",
              "max_tries": 3,
              "allow_topic_switch": false,
              "collect_verbatim_response": false,
              "response_collection_behavior": "always_ask"
            },
            "resolver": {
              "type": "continue"
            },
            "variable": "step_903",
            "condition": {
              "eq": [
                {
                  "skill_variable": "proceed_with_setting_context"
                },
                {
                  "scalar": true
                }
              ]
            },
            "next_step": "step_892"
          },
          {
            "step": "step_892",
            "title": "If user is wanting Windows 10 Pro",
            "output": {
              "generic": []
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "scalar": "Windows 10 Pro"
                  },
                  "skill_variable": "user_context"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_892",
            "condition": {
              "and": [
                {
                  "eq": [
                    {
                      "variable": "step_903"
                    },
                    {
                      "value": "Windows 10 Pro",
                      "from_entity": "entity_19711"
                    }
                  ]
                },
                {
                  "eq": [
                    {
                      "skill_variable": "proceed_with_setting_context"
                    },
                    {
                      "scalar": true
                    }
                  ]
                }
              ]
            },
            "next_step": "step_524"
          },
          {
            "step": "step_524",
            "title": "If user is wanting Windows 10 Home",
            "output": {
              "generic": []
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "scalar": "Windows 10 Home"
                  },
                  "skill_variable": "user_context"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_524",
            "condition": {
              "and": [
                {
                  "eq": [
                    {
                      "variable": "step_903"
                    },
                    {
                      "value": "Windows 10 Home",
                      "from_entity": "entity_19711"
                    }
                  ]
                },
                {
                  "eq": [
                    {
                      "skill_variable": "proceed_with_setting_context"
                    },
                    {
                      "scalar": true
                    }
                  ]
                }
              ]
            },
            "next_step": "step_230"
          },
          {
            "step": "step_230",
            "title": "Neither, no extra context will be passed along",
            "context": {
              "variables": [
                {
                  "value": {
                    "scalar": "no additional context"
                  },
                  "skill_variable": "user_context"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_230",
            "condition": {
              "and": [
                {
                  "eq": [
                    {
                      "variable": "step_903"
                    },
                    {
                      "value": "None of these",
                      "from_entity": "entity_19711"
                    }
                  ]
                },
                {
                  "eq": [
                    {
                      "skill_variable": "proceed_with_setting_context"
                    },
                    {
                      "scalar": true
                    }
                  ]
                }
              ]
            },
            "next_step": "step_659"
          },
          {
            "step": "step_659",
            "title": "Call the api to search and generate response",
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action_and_end",
              "invoke_action": {
                "action": "action_24095",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_659_result_1"
              }
            },
            "variable": "step_659"
          }
        ],
        "title": "Windows 10",
        "action": "action_12947",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_12947_intent_37929"
        },
        "variables": [
          {
            "title": "No response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_230",
            "data_type": "any"
          },
          {
            "title": "Did user already specify type of Windows 10 device?",
            "privacy": {
              "enabled": false
            },
            "variable": "step_397",
            "data_type": "any"
          },
          {
            "title": "If user is wanting Windows 10 Home",
            "privacy": {
              "enabled": false
            },
            "variable": "step_524",
            "data_type": "any"
          },
          {
            "title": "Call the api to search and generate response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_659",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_659_result_1",
            "data_type": "any"
          },
          {
            "title": "Save off original user query",
            "privacy": {
              "enabled": false
            },
            "variable": "step_797",
            "data_type": "any"
          },
          {
            "title": "If user is wanting Windows 10 Pro",
            "privacy": {
              "enabled": false
            },
            "variable": "step_892",
            "data_type": "any"
          },
          {
            "title": "Prompt for more specific device",
            "privacy": {
              "enabled": true
            },
            "variable": "step_903",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "action_3774",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_622",
            "title": "Call queryLLM to search and pass into LLM",
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/queryLLM",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "a7f456a1aefb1dbf7b77cbe17b93afbb28b41299c14622bd13cf4a16c7514feb",
                  "match_scenario": 10,
                  "catalog_item_id": "1c3eec52-26ef-4b44-9fc7-25124b77c32b"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "expression": "\"Given the additional context information: ${user_context}, answer the following query: ${query_text}\""
                      },
                      "parameter": "question"
                    },
                    {
                      "value": {
                        "skill_variable": "es_index_name"
                      },
                      "parameter": "es_index_name"
                    },
                    {
                      "value": {
                        "expression": "{}"
                      },
                      "parameter": "filters"
                    },
                    {
                      "value": {
                        "expression": "[]"
                      },
                      "parameter": "llm_params.inputs"
                    },
                    {
                      "value": {
                        "skill_variable": "es_model_name"
                      },
                      "parameter": "es_model_name"
                    },
                    {
                      "value": {
                        "skill_variable": "llm_instructions"
                      },
                      "parameter": "llm_instructions"
                    },
                    {
                      "value": {
                        "skill_variable": "es_index_text_field"
                      },
                      "parameter": "es_index_text_field"
                    },
                    {
                      "value": {
                        "skill_variable": "es_model_text_field"
                      },
                      "parameter": "es_model_text_field"
                    }
                  ]
                },
                "result_variable": "step_622_result_1"
              }
            },
            "variable": "step_622",
            "next_step": "step_198"
          },
          {
            "step": "step_198",
            "title": "Display LLM Response",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": ""
                          },
                          {
                            "skill_variable": "model_response"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "variable": "step_622_result_1",
                    "variable_path": "body.llm_response"
                  },
                  "skill_variable": "model_response"
                },
                {
                  "value": {
                    "expression": "${step_622_result_1.body.ref_list}"
                  },
                  "skill_variable": "references"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_198",
            "next_step": "step_930"
          },
          {
            "step": "step_930",
            "title": "Display reference list",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "For more information:\n\n\n  - "
                          },
                          {
                            "variable": "step_622_result_1",
                            "variable_path": "body.ref_list[0].ref"
                          },
                          {
                            "scalar": "\n  - "
                          },
                          {
                            "variable": "step_622_result_1",
                            "variable_path": "body.ref_list[1].ref"
                          },
                          {
                            "scalar": "\n  - "
                          },
                          {
                            "variable": "step_622_result_1",
                            "variable_path": "body.ref_list[2].ref"
                          },
                          {
                            "scalar": "\n  - "
                          },
                          {
                            "variable": "step_622_result_1",
                            "variable_path": "body.ref_list[3].ref"
                          },
                          {
                            "scalar": "\n  - "
                          },
                          {
                            "variable": "step_622_result_1",
                            "variable_path": "body.ref_list[4].ref"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "context": {
              "variables": []
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_930",
            "condition": {
              "eq": [
                {
                  "skill_variable": "print_references"
                },
                {
                  "scalar": true
                }
              ]
            },
            "next_step": "step_642"
          },
          {
            "step": "step_642",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "How do we know?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action",
              "invoke_action": {
                "action": "action_27321",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_642_result_1"
              }
            },
            "variable": "step_642",
            "condition": {
              "eq": [
                {
                  "skill_variable": "print_references"
                },
                {
                  "scalar": false
                }
              ]
            },
            "next_step": "step_932"
          },
          {
            "step": "step_932",
            "title": "Call the Ask for a rating action",
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action",
              "invoke_action": {
                "action": "action_3774",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_932_result_1"
              }
            },
            "variable": "step_932",
            "condition": {
              "eq": [
                {
                  "skill_variable": "enable_feedback"
                },
                {
                  "scalar": true
                }
              ]
            },
            "next_step": "step_991"
          },
          {
            "step": "step_991",
            "title": "Reset Variables",
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action",
              "invoke_action": {
                "action": "action_26299",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_991_result_1"
              }
            },
            "variable": "step_991"
          }
        ],
        "title": "Query ES + LLM",
        "action": "action_24095",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_24095_intent_10919"
        },
        "variables": [
          {
            "title": "Display LLM Response",
            "privacy": {
              "enabled": true
            },
            "variable": "step_198",
            "data_type": "any"
          },
          {
            "title": "Call queryLLM to search and pass into LLM",
            "privacy": {
              "enabled": false
            },
            "variable": "step_622",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_622_result_1",
            "data_type": "any"
          },
          {
            "title": "How do we know?",
            "privacy": {
              "enabled": false
            },
            "variable": "step_642",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_642_result_1",
            "data_type": "any"
          },
          {
            "title": "Display reference list",
            "privacy": {
              "enabled": false
            },
            "variable": "step_930",
            "data_type": "any"
          },
          {
            "title": "No response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_932",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_932_result_1",
            "data_type": "any"
          },
          {
            "title": "No response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_991",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_991_result_1",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "action_24095-2",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_622",
            "title": "Call queryLLM to search and pass into LLM",
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/queryWDLLM",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "77c55aad75a0eadfd724fe75a1f94f5c69dda182463b69874ff518980688b8e1",
                  "match_scenario": 12,
                  "catalog_item_id": "1c3eec52-26ef-4b44-9fc7-25124b77c32b"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "skill_variable": "query_text"
                      },
                      "parameter": "question"
                    },
                    {
                      "value": {
                        "skill_variable": "wd_project_id"
                      },
                      "parameter": "project_id"
                    },
                    {
                      "value": {
                        "skill_variable": "wd_collection_id"
                      },
                      "parameter": "collection_id"
                    },
                    {
                      "value": {
                        "expression": "[]"
                      },
                      "parameter": "llm_params.inputs"
                    },
                    {
                      "value": {
                        "expression": "[]"
                      },
                      "parameter": "wd_document_names"
                    }
                  ]
                },
                "result_variable": "step_622_result_1"
              }
            },
            "variable": "step_622",
            "next_step": "step_930"
          },
          {
            "step": "step_930",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": ""
                          },
                          {
                            "variable": "step_622_result_1",
                            "variable_path": "body.llm_response"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_930"
          }
        ],
        "title": "Query WD + LLM",
        "action": "action_24095-2",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_24095_intent_10919-2"
        },
        "variables": [
          {
            "title": "Call queryLLM to search and pass into LLM",
            "privacy": {
              "enabled": false
            },
            "variable": "step_622",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_622_result_1",
            "data_type": "any"
          },
          {
            "title": "{variable}",
            "variable": "step_930",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "fallback",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_815",
            "title": "Reset comments and user_context",
            "context": {
              "variables": [
                {
                  "value": {
                    "scalar": "No additional comments"
                  },
                  "skill_variable": "comments"
                },
                {
                  "value": {
                    "scalar": "no additional context"
                  },
                  "skill_variable": "user_context"
                },
                {
                  "value": {
                    "scalar": true
                  },
                  "skill_variable": "proceed_with_setting_context"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_815"
          }
        ],
        "title": "Clear variables",
        "action": "action_26299",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_26299_intent_31600"
        },
        "variables": [
          {
            "title": "No response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_815",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "action_12947",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_639",
            "output": {
              "generic": []
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "${template} = {    \"response_type\": \"card\",    \"body\": [      { \"response_type\": \"text\", \"text\": \"%e.label%\" }  ],    \"footer\": [ { \"response_type\": \"button\", \"button_type\": \"url\", \"label\": \"Source\", \"url\": \"%e.url%\" }]}"
                  }
                },
                {
                  "value": {
                    "expression": "${references} =${references}.joinToArray(${template})"
                  }
                },
                {
                  "value": {
                    "expression": "${references} = {  \"response_type\": \"carousel\",  \"items\": ${references}}"
                  }
                },
                {
                  "value": {
                    "expression": "output.generic.add(${references})"
                  }
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_639"
          }
        ],
        "title": "-> Create Carousel",
        "action": "action_27321",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_27321_intent_16282"
        },
        "variables": [
          {
            "title": "",
            "privacy": {
              "enabled": false
            },
            "variable": "step_639",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "action_26299",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_715",
            "title": "Ask for rating",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "On a scale of 1 to 5 how would you rate the response?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential",
                  "repeat_on_reprompt": false
                },
                {
                  "options": [
                    {
                      "label": "5 - Excellent",
                      "value": {
                        "input": {
                          "text": "5 - Excellent"
                        }
                      }
                    },
                    {
                      "label": "4 - Correct but repeated sentences or formatting issues",
                      "value": {
                        "input": {
                          "text": "4 - Correct but repeated sentences or formatting issues"
                        }
                      }
                    },
                    {
                      "label": "3 - Correct but sentences are incomplete or truncated",
                      "value": {
                        "input": {
                          "text": "3 - Correct but sentences are incomplete or truncated"
                        }
                      }
                    },
                    {
                      "label": "2 - Partially correct or missing key part",
                      "value": {
                        "input": {
                          "text": "2 - Partially correct or missing key part"
                        }
                      }
                    },
                    {
                      "label": "1 - Incorrect",
                      "value": {
                        "input": {
                          "text": "1 - Incorrect"
                        }
                      }
                    }
                  ],
                  "response_type": "option",
                  "repeat_on_reprompt": true
                }
              ]
            },
            "handlers": [
              {
                "type": "not_found",
                "title": "validation_not_found_handler",
                "output": {
                  "generic": [
                    {
                      "values": [
                        {
                          "text_expression": {
                            "concat": [
                              {
                                "scalar": "I didn't catch that. Please rate the previous response"
                              }
                            ]
                          }
                        }
                      ],
                      "response_type": "text",
                      "selection_policy": "incremental"
                    }
                  ]
                },
                "handler": "validation_not_found_handler",
                "resolver": {
                  "type": "prompt_again"
                },
                "next_handler": "validation_not_found_max_tries_handler"
              },
              {
                "type": "not_found_max_tries",
                "title": "validation_not_found_max_tries_handler",
                "handler": "validation_not_found_max_tries_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "question": {
              "entity": "entity_38367",
              "max_tries": 3
            },
            "resolver": {
              "type": "continue"
            },
            "variable": "step_715",
            "next_step": "step_707"
          },
          {
            "step": "step_707",
            "title": "Ask for additional comments",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Thank you for your rating, would you like to leave additional comments to explain your choice?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential",
                  "repeat_on_reprompt": false
                },
                {
                  "options": [
                    {
                      "label": "Yes",
                      "value": {
                        "input": {
                          "text": "Yes"
                        }
                      }
                    },
                    {
                      "label": "No",
                      "value": {
                        "input": {
                          "text": "No"
                        }
                      }
                    }
                  ],
                  "response_type": "option",
                  "repeat_on_reprompt": true
                }
              ]
            },
            "handlers": [
              {
                "type": "not_found",
                "title": "validation_not_found_handler",
                "output": {
                  "generic": [
                    {
                      "values": [
                        {
                          "text_expression": {
                            "concat": [
                              {
                                "scalar": "I'm sorry, I did not catch that, please restate your response."
                              }
                            ]
                          }
                        }
                      ],
                      "response_type": "text",
                      "selection_policy": "incremental"
                    }
                  ]
                },
                "handler": "validation_not_found_handler",
                "resolver": {
                  "type": "prompt_again"
                },
                "next_handler": "validation_not_found_max_tries_handler"
              },
              {
                "type": "not_found_max_tries",
                "title": "validation_not_found_max_tries_handler",
                "handler": "validation_not_found_max_tries_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "question": {
              "entity": "sys-yes-no",
              "max_tries": 3,
              "response_collection_behavior": "always_ask"
            },
            "resolver": {
              "type": "continue"
            },
            "variable": "step_707",
            "next_step": "step_709"
          },
          {
            "step": "step_709",
            "title": "If they want to provide additional comments, prompt for them",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "What are your additional comments?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "question": {
              "free_text": true
            },
            "resolver": {
              "type": "continue"
            },
            "variable": "step_709",
            "condition": {
              "eq": [
                {
                  "variable": "step_707"
                },
                {
                  "scalar": "yes"
                }
              ]
            },
            "next_step": "step_472"
          },
          {
            "step": "step_472",
            "title": "If they provide comments, save them off",
            "context": {
              "variables": [
                {
                  "value": {
                    "variable": "step_709"
                  },
                  "skill_variable": "comments"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_472",
            "condition": {
              "exists": {
                "variable": "step_709"
              }
            },
            "next_step": "step_694"
          },
          {
            "step": "step_694",
            "title": "Save off logging payload information",
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "{\"date_time\": ${system_now}.value , \n\"query\": ${query_text} , \"llm_response\": ${model_response} , \"rating\": ${step_715} , \"comments\": ${comments} }"
                  },
                  "skill_variable": "feedback_payload"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_694",
            "next_step": "step_451"
          },
          {
            "step": "step_451",
            "title": "If debug mode, display the logging information",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Debug is set to True. Printing out logging information:\n\n\n\n"
                          },
                          {
                            "skill_variable": "feedback_payload"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_451",
            "condition": {
              "eq": [
                {
                  "skill_variable": "debug"
                },
                {
                  "scalar": true
                }
              ]
            },
            "next_step": "step_608"
          },
          {
            "step": "step_608",
            "title": "Prompt for next question",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Thank you. Please ask your next question."
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_608"
          }
        ],
        "title": "Ask for a rating",
        "action": "action_3774",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_3774_intent_16967"
        },
        "variables": [
          {
            "title": "Debug is set to True. Printing out logging information: {variabl",
            "privacy": {
              "enabled": false
            },
            "variable": "step_451",
            "data_type": "any"
          },
          {
            "variable": "step_472",
            "data_type": "any"
          },
          {
            "title": "Prompt for next question",
            "privacy": {
              "enabled": false
            },
            "variable": "step_608",
            "data_type": "any"
          },
          {
            "title": "No response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_694",
            "data_type": "any"
          },
          {
            "title": "Thank you for your rating, would you like to leave additional co",
            "privacy": {
              "enabled": false
            },
            "variable": "step_707",
            "data_type": "yes_no"
          },
          {
            "title": "If they want to provide additional comments, prompt for them",
            "privacy": {
              "enabled": false
            },
            "variable": "step_709",
            "data_type": "any"
          },
          {
            "title": "Ask for rating",
            "privacy": {
              "enabled": false
            },
            "variable": "step_715",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "action_24095",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_715",
            "title": "Save off original user query",
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "input.text"
                  },
                  "skill_variable": "query_text"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_715",
            "next_step": "step_558"
          },
          {
            "step": "step_558",
            "title": "Call LLM to search and generate response",
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action_and_end",
              "invoke_action": {
                "action": "action_24095",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_558_result_1"
              }
            },
            "variable": "step_558"
          }
        ],
        "title": "No action matches",
        "action": "anything_else",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "anything_else"
        },
        "variables": [
          {
            "title": "No response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_558",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_558_result_1",
            "data_type": "any"
          },
          {
            "title": "No response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_715",
            "data_type": "any"
          }
        ],
        "disambiguation_opt_out": true
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "digression_failure",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't confirm if you wanted to return to previous topic, let me connect to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "digression_failure",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Failed to confirm topic return"
                }
              ]
            },
            "next_step": "step_001"
          },
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I'm afraid I don't understand. I can connect you to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_001",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Step validation failed"
                }
              ]
            },
            "next_step": "step_002"
          },
          {
            "step": "step_002",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't assist you. I will connect you to an agent right away."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_002",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Agent requested"
                }
              ]
            },
            "next_step": "step_003"
          },
          {
            "step": "step_003",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I am afraid I do not understand what you are asking, let me connect you to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_003",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "No action matches"
                }
              ]
            },
            "next_step": "step_004"
          },
          {
            "step": "step_004",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_004",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Danger word detected"
                }
              ]
            },
            "next_step": "step_005"
          },
          {
            "step": "step_005",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_005",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Profanity detected"
                }
              ]
            }
          }
        ],
        "title": "Fallback",
        "action": "fallback",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "fallback_connect_to_agent"
        },
        "variables": [
          {
            "title": "Topic return failed",
            "variable": "digression_failure",
            "data_type": "any"
          },
          {
            "title": "I'm afraid I don't understand. I can connect you to an agent.",
            "variable": "step_001",
            "data_type": "any"
          },
          {
            "title": "Sorry I couldn't assist you. I will connect you to an agent righ",
            "variable": "step_002",
            "data_type": "any"
          },
          {
            "title": "I am afraid I do not understand what you are asking, let me conn",
            "variable": "step_003",
            "data_type": "any"
          },
          {
            "title": "It seems this conversation would be best managed",
            "variable": "step_004",
            "data_type": "any"
          },
          {
            "title": "Profanity - It seems this conversation",
            "variable": "step_005",
            "data_type": "any"
          }
        ],
        "next_action": "run_always",
        "disambiguation_opt_out": true
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "danger_word_detected",
            "title": "Connect to agent",
            "handlers": [],
            "resolver": {
              "type": "fallback"
            },
            "variable": "danger_word_detected_variable",
            "condition": {
              "entity": "danger_words"
            },
            "next_step": "profanity_detected"
          },
          {
            "step": "profanity_detected",
            "title": "Show warning",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Please use appropriate language when interacting with the assistant."
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [
              {
                "type": "max_hits",
                "handler": "max_hits_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "max_hits": 2,
            "resolver": {
              "type": "end_action"
            },
            "variable": "profanity_detected_variable",
            "condition": {
              "entity": "profane_words"
            }
          }
        ],
        "title": "Trigger word detected",
        "action": "run_always",
        "boosts": [],
        "handlers": [],
        "variables": [
          {
            "title": "Profanity detected",
            "variable": "danger_word_detected_variable",
            "data_type": "any"
          },
          {
            "title": "Profane word detected",
            "variable": "profanity_detected_variable",
            "data_type": "any"
          }
        ],
        "next_action": "anything_else"
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Welcome, how can I assist you?"
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_001"
          }
        ],
        "title": "Greet customer",
        "action": "welcome",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "welcome"
        },
        "variables": [
          {
            "variable": "step_001",
            "data_type": "any"
          }
        ],
        "next_action": "action_27321",
        "disambiguation_opt_out": true
      }
    ],
    "intents": [
      {
        "intent": "action_12947_intent_37929",
        "examples": [
          {
            "text": "Windows 10"
          }
        ]
      },
      {
        "intent": "action_24095_intent_10919",
        "examples": [
          {
            "text": "I have a question"
          }
        ]
      },
      {
        "intent": "action_24095_intent_10919-2",
        "examples": []
      },
      {
        "intent": "action_26299_intent_31600",
        "examples": [
          {
            "text": "Clear variables"
          }
        ]
      },
      {
        "intent": "action_27321_intent_16282",
        "examples": [
          {
            "text": "-> Create Carousel"
          }
        ]
      },
      {
        "intent": "action_3774_intent_16967",
        "examples": [
          {
            "text": "Ask for a rating"
          }
        ]
      },
      {
        "intent": "fallback_connect_to_agent",
        "examples": [
          {
            "text": "Agent help"
          },
          {
            "text": "Call agent"
          },
          {
            "text": "Can I connect to an agent?"
          },
          {
            "text": "I would like to speak to a human"
          },
          {
            "text": "I would like to speak to someone"
          }
        ],
        "description": "Please transfer me to an agent"
      }
    ],
    "entities": [
      {
        "entity": "danger_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "entity_17250",
        "values": [
          {
            "type": "patterns",
            "value": "Regular_expression",
            "patterns": [
              "\"^(?:.*[a-z])(?:.*[A-Z])(?:.*\\d)(?:.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$\""
            ]
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "entity_19711",
        "values": [
          {
            "type": "synonyms",
            "value": "None of these",
            "synonyms": []
          },
          {
            "type": "synonyms",
            "value": "Windows 10 Home",
            "synonyms": []
          },
          {
            "type": "synonyms",
            "value": "Windows 10 Pro",
            "synonyms": []
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "entity_25899",
        "values": [
          {
            "type": "patterns",
            "value": "Email",
            "patterns": [
              "\\b(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\\b"
            ]
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "entity_38367",
        "values": [
          {
            "type": "synonyms",
            "value": "1 - Incorrect",
            "synonyms": []
          },
          {
            "type": "synonyms",
            "value": "2 - Partially correct or missing key part",
            "synonyms": []
          },
          {
            "type": "synonyms",
            "value": "3 - Correct but sentences are incomplete or truncated",
            "synonyms": []
          },
          {
            "type": "synonyms",
            "value": "4 - Correct but repeated sentences or formatting issues",
            "synonyms": []
          },
          {
            "type": "synonyms",
            "value": "5 - Excellent",
            "synonyms": []
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "profane_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "sys-currency",
        "values": []
      },
      {
        "entity": "sys-date",
        "values": []
      },
      {
        "entity": "sys-number",
        "values": []
      },
      {
        "entity": "sys-percentage",
        "values": []
      },
      {
        "entity": "sys-time",
        "values": []
      },
      {
        "entity": "sys-yes-no",
        "values": []
      }
    ],
    "metadata": {
      "api_version": {
        "major_version": "v2",
        "minor_version": "2018-11-08"
      }
    },
    "variables": [
      {
        "title": "comments",
        "privacy": {
          "enabled": false
        },
        "variable": "comments",
        "data_type": "string",
        "description": "",
        "initial_value": {
          "scalar": "No additional comments"
        }
      },
      {
        "title": "debug",
        "privacy": {
          "enabled": false
        },
        "variable": "debug",
        "data_type": "boolean",
        "description": "If true, print out logging information to assistant so user can verify it is being saved correctly",
        "initial_value": {
          "scalar": false
        }
      },
      {
        "title": "enable_feedback",
        "privacy": {
          "enabled": false
        },
        "variable": "enable_feedback",
        "data_type": "boolean",
        "description": "Enable actions to request feedback on LLM answer",
        "initial_value": {
          "scalar": true
        }
      },
      {
        "title": "es_index_name",
        "privacy": {
          "enabled": false
        },
        "variable": "es_index_name",
        "data_type": "string",
        "description": "Required: name of Elasticsearch index to search",
        "initial_value": {
          "scalar": "search-maas360-docs"
        }
      },
      {
        "title": "es_index_text_field",
        "privacy": {
          "enabled": false
        },
        "variable": "es_index_text_field",
        "data_type": "string",
        "description": "Name for field in indexed document containing text to be returned",
        "initial_value": {
          "scalar": "body_content_field"
        }
      },
      {
        "title": "es_model_name",
        "privacy": {
          "enabled": false
        },
        "variable": "es_model_name",
        "data_type": "string",
        "description": "Name of the Elasticsearch model used to create the embeddings",
        "initial_value": {
          "scalar": ".elser_model_2_linux-x86_64"
        }
      },
      {
        "title": "es_model_text_field",
        "privacy": {
          "enabled": false
        },
        "variable": "es_model_text_field",
        "data_type": "string",
        "description": "Name of field in index containing embeddings",
        "initial_value": {
          "scalar": "ml.sparse_embedding"
        }
      },
      {
        "title": "feedback_payload",
        "privacy": {
          "enabled": false
        },
        "variable": "feedback_payload",
        "data_type": "any",
        "description": "Used to store payload saved from user feedback to be used by logging script"
      },
      {
        "title": "llm_instructions",
        "privacy": {
          "enabled": false
        },
        "variable": "llm_instructions",
        "data_type": "string",
        "description": "Prompt to send in to api call for LLM",
        "initial_value": {
          "scalar": "[INST]<<SYS>>You are a helpful, respectful, and honest assistant. Always answer as helpfully as possible, while being safe. Be brief in your answers. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature. If a question does not make any sense or is not factually coherent, explain why instead of answering something incorrect. If you do not know the answer to a question, please do not share false information. <</SYS>>\\nGenerate the next agent response by answering the question. You are provided several documents with titles. If the answer comes from different documents please mention all possibilities and use the tiles of documents to separate between topics or domains. Answer with no more than 150 words. If you cannot base your answer on the given document, please state that you do not have an answer.\\n{context_str}<</SYS>>\\n\\n{query_str} Answer with no more than 150 words. If you cannot base your answer on the given document, please state that you do not have an answer. [/INST]"
        }
      },
      {
        "title": "model_id",
        "variable": "model_id",
        "data_type": "string",
        "description": "The ID of the model to be used for this user prompt. Please refer to the list of models at https://bam.res.ibm.com/docs/models",
        "initial_value": {
          "scalar": "meta-llama/llama-2-13b-chat"
        }
      },
      {
        "title": "model_input",
        "privacy": {
          "enabled": false
        },
        "variable": "model_input",
        "data_type": "string",
        "description": "Additional input to the watsonx model"
      },
      {
        "title": "model_parameters_max_new_tokens",
        "variable": "model_parameters_max_new_tokens",
        "data_type": "number",
        "description": "The maximum number of new tokens to be generated.",
        "initial_value": {
          "scalar": 300
        }
      },
      {
        "title": "model_parameters_min_new_tokens",
        "variable": "model_parameters_min_new_tokens",
        "data_type": "number",
        "description": "The minimum number of new tokens to be generated.",
        "initial_value": {
          "scalar": 1
        }
      },
      {
        "title": "model_parameters_repetition_penalty",
        "privacy": {
          "enabled": false
        },
        "variable": "model_parameters_repetition_penalty",
        "data_type": "number",
        "description": "Determines likeliness of LLM to be able to repeat generated text",
        "initial_value": {
          "scalar": 1
        }
      },
      {
        "title": "model_parameters_stop_sequences",
        "privacy": {
          "enabled": false
        },
        "variable": "model_parameters_stop_sequences",
        "data_type": "any",
        "description": "Sequences or strings used to stop LLM output",
        "initial_value": {
          "expression": "[ \"\\n\\n\"]"
        }
      },
      {
        "title": "model_parameters_temperature",
        "privacy": {
          "enabled": false
        },
        "variable": "model_parameters_temperature",
        "data_type": "number",
        "description": "he value used to control the next token probabilities. The range is from 0.05 to 1.00; 0.05 makes it mostly deterministic.",
        "initial_value": {
          "scalar": 0.7
        }
      },
      {
        "title": "model_response",
        "variable": "model_response",
        "data_type": "string",
        "description": "The text generated by the model in response to the model input"
      },
      {
        "title": "num_results",
        "privacy": {
          "enabled": false
        },
        "variable": "num_results",
        "data_type": "number",
        "description": "Number of documents to return from Elasticsearch",
        "initial_value": {
          "scalar": 5
        }
      },
      {
        "title": "print_references",
        "privacy": {
          "enabled": false
        },
        "variable": "print_references",
        "data_type": "boolean",
        "description": "If true, print the references as a list.  If false, will create a carousel with the references",
        "initial_value": {
          "scalar": false
        }
      },
      {
        "title": "proceed_with_setting_context",
        "privacy": {
          "enabled": false
        },
        "variable": "proceed_with_setting_context",
        "data_type": "boolean",
        "description": "Used in the Windows 10 action to prevent putting up list if user specified Windows 10 Home or Windows 10 Pro",
        "initial_value": {
          "scalar": false
        }
      },
      {
        "title": "query_text",
        "privacy": {
          "enabled": false
        },
        "variable": "query_text",
        "data_type": "string",
        "description": "Save off the user's query"
      },
      {
        "title": "references",
        "privacy": {
          "enabled": false
        },
        "variable": "references",
        "data_type": "any",
        "description": "Save off curated references returned from queryLLM api"
      },
      {
        "title": "template",
        "privacy": {
          "enabled": false
        },
        "variable": "template",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "user_context",
        "privacy": {
          "enabled": false
        },
        "variable": "user_context",
        "data_type": "string",
        "description": "To pass additional context into the LLM",
        "initial_value": {
          "scalar": "No additional context"
        }
      },
      {
        "title": "wd_collection_id",
        "privacy": {
          "enabled": false
        },
        "variable": "wd_collection_id",
        "data_type": "string",
        "description": "Optional: ID for the Watson Discovery Collection within the project"
      },
      {
        "title": "wd_document_names",
        "privacy": {
          "enabled": false
        },
        "variable": "wd_document_names",
        "data_type": "any",
        "description": "Optional: array with list of documents to search in Watson Discovery project and collection, example [\"acme.pdf\", \"test.docx\"]"
      },
      {
        "title": "wd_project_id",
        "privacy": {
          "enabled": false
        },
        "variable": "wd_project_id",
        "data_type": "string",
        "description": "Required: Value to the project ID of the Watson Discovery project containing your data",
        "initial_value": {
          "scalar": "1fef694b-86ea-4260-8440-bc29989de92e"
        }
      },
      {
        "title": "wd_return_params",
        "privacy": {
          "enabled": false
        },
        "variable": "wd_return_params",
        "data_type": "any",
        "description": "Fields to pull from Watson Discovery",
        "initial_value": {
          "scalar": "[\"Title\", \"Text\"]"
        }
      },
      {
        "title": "wd_version",
        "privacy": {
          "enabled": false
        },
        "variable": "wd_version",
        "data_type": "string",
        "description": "Watson Discovery URL Version",
        "initial_value": {
          "scalar": "2020-08-30"
        }
      }
    ],
    "data_types": [],
    "collections": [],
    "counterexamples": [],
    "system_settings": {
      "variable": {
        "format": {
          "time": {
            "pattern": "short"
          },
          "currency": {
            "fraction_digits": 2
          }
        }
      },
      "off_topic": {
        "enabled": true
      },
      "topic_switch": {
        "enabled": true,
        "messages": {
          "enable_confirmation": true,
          "confirmation_failure": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "I'm sorry, I did not catch that, please confirm."
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              }
            ]
          },
          "confirmation_request": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "Do you want to continue with the previous topic: "
                        },
                        {
                          "system_variable": "digressed_from"
                        },
                        {
                          "scalar": "?"
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              },
              {
                "options": [
                  {
                    "label": "Yes",
                    "value": {
                      "input": {
                        "text": "Yes"
                      }
                    }
                  },
                  {
                    "label": "No",
                    "value": {
                      "input": {
                        "text": "No"
                      }
                    }
                  }
                ],
                "response_type": "option",
                "repeat_on_reprompt": true
              }
            ]
          }
        },
        "max_tries": 3
      },
      "disambiguation": {
        "prompt": "Did you mean:",
        "enabled": true,
        "randomize": true,
        "max_suggestions": 5,
        "suggestion_text_policy": "title",
        "none_of_the_above_prompt": "None of the above",
        "use_connect_to_support_prompt": "connect to support",
        "single_answer_clarification_prompt": "Something else"
      },
      "spelling_auto_correct": true
    },
    "learning_opt_out": true
  },
  "description": "created for assistant 1c76effb-2430-4334-8897-6cdad3c6282b",
  "assistant_id": "aea4f3b2-9fe8-4db0-9856-247bf32c2a68",
  "workspace_id": "55331103-544e-4746-b438-ca69ae204366",
  "dialog_settings": {},
  "next_snapshot_version": "1",
  "environment_id": "12e529ce-2bdd-4410-9272-1bd149cff5c2"
}